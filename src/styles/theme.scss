@use "sass:meta";
@use "sass:string";

$dark-100: #1b1b1b;
$dark-90: #2c2c2c;
$dark-80: #3d3d3d;
$dark-70: #4e4e4e;
$dark-60: #5f5f5f;
$dark-50: #707070;
$dark-40: #818181;
$dark-30: #929292;
$dark-20: #a3a3a3;
$dark-10: #b4b4b4;
$dark-05: #e5e5e5;

$darkPalette: (
  "dark-100": #1b1b1b,
  "dark-90": #2c2c2c,
  "dark-80": #3d3d3d,
  "dark-70": #4e4e4e,
  "dark-60": #5f5f5f,
  "dark-50": #707070,
  "dark-40": #818181,
  "dark-30": #929292,
  "dark-20": #a3a3a3,
  "dark-10": #b4b4b4,
  "dark-05": #e5e5e5
);

$gray-100: #606266;
$gray-50: #f5f7fa;

$grayPalette: (
  "gray-100": #606266,
  "gray-50": #f5f7fa
);

$light-0: #f5f5f5;
$light-1: #f9f9f9;
$light-2: #f0f0f0;
$light-3: #f7f7f7;
$light-100: #ffffff;

$lightPalette: (
  "light-0": #f5f5f5,
  "light-1": #f9f9f9,
  "light-2": #f7f7f7,
  "light-3": #f0f0f0,
  "light-100": #ffffff
);

$semantic: (
  "negative": #d74747,
  "warning": #e9c339,
  "positive": #059f19,
  "ease": #8cffff,
  "promo": #3f9eff,
  "dramatic": linear-gradient(180deg, #baa671, #d4be81)
);

$negative: #d74747;
$warning: #e9c339;
$positive: #059f19;
$ease: #8cffff;
$promo: #3f9eff;
$dramatic: linear-gradient(180deg, #baa671, #d4be81);

$customPalettesList: $darkPalette, $grayPalette, $lightPalette, $semantic;

// typography

$header: (
  "h1": 2.5rem,
  "h2": 2rem,
  "h3": 1.75rem,
  "h4": 1.5rem,
  "h5": 1.25rem,
  "h6": 1rem,
  "subtitle1": 1rem,
  "subtitle2": 0.875rem,
  "body1": 1rem,
  "body2": 0.875rem,
  "caption": 0.75rem,
  "overline": 0.625rem
);

// 框線基礎樣式
$border-widths: (
  "1": 1px,
  "2": 2px
) !default;
// 生成框線樣式
@each $width-key, $width in $border-widths {
  // 全邊框樣式
  .bd-#{$width-key},
  .bda-#{$width-key} {
    border-width: $width;
    border-style: solid;
  }

  .bd-none {
    border: none !important;
  }

  // 單邊框樣式
  .bdt-#{$width-key} {
    border-top-width: $width;
    border-right-width: none;
    border-bottom-width: none;
    border-left-width: none;
    border-top-style: solid;
  }
  .bdr-#{$width-key} {
    border-right-width: $width;
    border-top-width: none;
    border-bottom-width: none;
    border-left-width: none;
    border-right-style: solid;
  }
  .bdb-#{$width-key} {
    border-bottom-width: $width;
    border-top-width: none;
    border-right-width: none;
    border-left-width: none;
    border-bottom-style: solid;
  }
  .bdl-#{$width-key} {
    border-left-width: $width;
    border-top-width: none;
    border-right-width: none;
    border-bottom-width: none;
    border-left-style: solid;
  }
}

// Mixin to generate typography classes

@mixin generate-typography-classes($name, $size) {
  .header-#{$name} {
    font-size: $size;
  }
}

@each $name, $size in $header {
  @include generate-typography-classes($name, $size);
}

// Function to check if a value is a gradient
@function is-gradient($value) {
  @return meta.type-of($value) == "string" and string.index($value, "gradient") != null;
}

// Mixin to generate color classes
@mixin generate-color-classes($name, $color) {
  .text-#{$name} {
    color: $color;
  }
  .text-#{$name}-hover:hover {
    color: $color;
  }
  .text-#{$name}-active:active {
    color: $color;
  }

  .header-#{$name} {
    color: $color;
  }

  @if is-gradient($color) {
    .bg-#{$name} {
      background: $color;
    }
  } @else {
    .bg-#{$name} {
      background-color: $color;
    }
  }

  .bd-#{$name} {
    border-color: $color;
    &.q-btn--outline:before {
      border-color: $color;
    }
  }
}

// Generate classes for all palettes
@each $palettes in $customPalettesList {
  @each $name, $color in $palettes {
    @include generate-color-classes($name, $color);
  }
}

@function useColor($name) {
  @each $palette in $customPalettesList {
    @if map-has-key($palette, $name) {
      @return map-get($palette, $name);
    }
  }
  @warn "Color '#{$name}' not found in any palette.";
  @return null;
}
